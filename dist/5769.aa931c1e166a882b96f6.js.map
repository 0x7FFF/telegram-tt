{"version":3,"file":"5769.aa931c1e166a882b96f6.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { isReactionChosen, isSameReaction } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !message.replyToStoryId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiTypeReplyTo,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStory,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyUserId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const replyingToId = !isStoryReply ? selectReplyingToId(global, chatId!, threadId!) : undefined;\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId!, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId!, threadId!)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n  const replyingTo: ApiTypeReplyTo | undefined = replyingToId\n    ? { replyingTo: replyingToId, replyingToTopId }\n    : (isStoryReply ? { userId: storyUserId!, storyId: storyId! } : undefined);\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: threadId!,\n    replyingTo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo: replyingToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo: replyingToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingTo: toThreadId ? { replyingTo: toThreadId, replyingToTopId: toThreadId } : undefined,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: ApiTypeReplyTo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (params.currentThreadId !== MAIN_THREAD_ID) {\n    if (!params.replyingTo || !('replyingTo' in params.replyingTo)) {\n      params.replyingTo = {\n        replyingTo: params.currentThreadId,\n      };\n    }\n\n    if (!params.replyingTo.replyingTo) {\n      params.replyingTo.replyingTo = params.currentThreadId;\n    }\n    if (params.replyingTo.replyingTo && !params.replyingTo.replyingToTopId) {\n      params.replyingTo.replyingToTopId = params.currentThreadId;\n    }\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.userId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectUserStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    currentThreadId: MAIN_THREAD_ID,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectThreadInfo,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadUserStories({ userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectIsTrustedBot,\n  selectReplyingToId, selectSendAs, selectTabState, selectThreadTopMessageId, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingTo: replyingTo ? {\n      replyingTo,\n      replyingToTopId: threadId,\n    } : undefined,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers,\n  updateMessageStatistics, updateStatistics, updateStatisticsGraph,\n} from '../../reducers';\nimport { selectChat, selectChatFullInfo, selectChatMessages } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { getStoryKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForUser,\n  addUsers,\n  removeUserStory,\n  toggleUserStoriesHidden,\n  updateLastReadStoryForUser,\n  updateLastViewedStoryForUser,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n  updateUser,\n  updateUserPinnedStory,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!user || !userStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(userStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', {\n    user,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  const story = selectUserStory(global, userId, storyId);\n  if (!user || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForUser(global, userId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { user, storyId });\n  }\n\n  const isUnread = (global.stories.byUserId[userId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    user,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForUser(global, userId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { storyId } = payload;\n\n  const result = await callApi('deleteStory', { storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeUserStory(global, global.currentUserId!, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { storyId, isPinned } = payload;\n\n  const story = selectUserStory(global, global.currentUserId!, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updateUserStory(global, global.currentUserId!, storyId, { isPinned });\n  global = updateUserPinnedStory(global, global.currentUserId!, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updateUserStory(global, global.currentUserId!, storyId, { isPinned: currentIsPinned });\n    global = updateUserPinnedStory(global, global.currentUserId!, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStories', { user });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForUser(global, userId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadUserPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { userId, offsetId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserPinnedStories', { user, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { offsetId } = payload;\n  const currentUserId = global.currentUserId!;\n\n  const result = await callApi('fetchStoriesArchive', { currentUserId, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, currentUserId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadUserStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { userId, storyIds } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', { user, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updateUserStory(global, global.currentUserId!, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    userId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    user,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    storyId,\n    privacy,\n  } = payload;\n\n  const allowedUserList = privacy.allowUserIds?.map((userId) => selectUser(global, userId)).filter(Boolean);\n  const deniedUserList = privacy.blockUserIds?.map((userId) => selectUser(global, userId)).filter(Boolean);\n  void callApi('editStoryPrivacy', {\n    id: storyId,\n    visibility: privacy.visibility,\n    allowedUserList,\n    deniedUserList,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { userId, isHidden } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('toggleStoriesHidden', { user, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = toggleUserStoriesHidden(global, userId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n  const users = userIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n  if (!users.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { users });\n  if (!result) return;\n\n  const userIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const user = users[i];\n    global = updateUser(global, user.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n    if (maxId !== 0) {\n      userIdsToLoad.push(user.id);\n    }\n  });\n  setGlobal(global);\n\n  userIdsToLoad?.forEach((userId) => actions.loadUserStories({ userId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const story = selectUserStory(global, userId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateUserStory(global, userId, storyId, {\n    sentReaction: reaction,\n  });\n  setGlobal(global);\n\n  const containerId = getStoryKey(userId, storyId);\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    user, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateUserStory(global, userId, storyId, {\n      sentReaction: previousReaction,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from '../config';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, IS_ELECTRON,\n  PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    storyUserId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyUserId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyUserId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForUser, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectTabState,\n  selectUser,\n  selectUserFirstStoryId,\n  selectUserFirstUnreadStoryId,\n  selectUserStories,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const userStories = selectUserStories(global, userId);\n\n  if (storyId && (!userStories || !userStories.byId[storyId])) {\n    const result = await callApi('fetchUserStoriesByIds', { user, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addStoriesForUser(global, userId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId,\n      storyId: storyId || selectUserFirstUnreadStoryId(global, userId) || selectUserFirstStoryId(global, userId),\n      isSingleUser,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    userId: chat.id,\n    storyId,\n    isSingleUser: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByUserIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedUserIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousUserId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousUserId = userId;\n  } else {\n    const previousUserIdIndex = orderedUserIds.indexOf(userId) - 1;\n    if (isSingleUser || previousUserIdIndex < 0) {\n      return undefined;\n    }\n\n    previousUserId = orderedUserIds[previousUserIdIndex];\n    previousStoryIndex = (selectUserStories(global, previousUserId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectUserStories(global, previousUserId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: previousUserId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextUserId: string;\n\n  if (currentStoryIndex < userStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextUserId = userId;\n  } else {\n    const nextUserIdIndex = orderedUserIds.indexOf(userId) + 1;\n    if (isSingleUser || nextUserIdIndex > orderedUserIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextUserId = orderedUserIds[nextUserIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectUserStories(global, nextUserId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: nextUserId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const link = await callApi('fetchStoryLink', { userId, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyUserId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, toggleUserStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const currentUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (currentUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = toggleUserStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForUser,\n  removeBlockedUser,\n  removeUserStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForUser,\n  updateStealthMode,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport { selectUserStories, selectUserStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForUser(global, update.userId, { [update.story.id]: update.story });\n      global = updateUsersWithStories(global, { [update.userId]: selectUserStories(global, update.userId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removeUserStory(global, update.userId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForUser(global, update.userId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { userId, storyId, reaction } = update;\n      const story = selectUserStory(global, userId, storyId);\n      if (!story) return global;\n      global = updateUserStory(global, userId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedUserIds: {\n          archived: archivedStories,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_ELECTRON,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_APP, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    openChatWithInfo,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archiveSettings.isHidden, archivedUnreadChatsCount, canInstall, lang, onSelectArchived,\n    onSelectContacts, onSelectSettings, theme, withOtherVersions,\n  ]);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_ELECTRON } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_APP, IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTypeStory, ApiUser } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n  getUserColorKey,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiUser | ApiChat;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p dir=\"auto\">\n          {isExpiredStory && (\n            <i className=\"icon icon-story-expired\" aria-hidden />\n          )}\n          {isFullStory && (\n            <i className=\"icon icon-story-reply\" aria-hidden />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport { IS_ELECTRON } from '../../../config';\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPoll, ApiPollAnswer, ApiUser,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectUserStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  user?: ApiUser;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, user, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      userId: story!.userId,\n      storyId: story!.id,\n      isSingleUser: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.userId, storyData!.id, story);\n\n  function getTitle() {\n    if (user?.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getUserFirstOrLastName(user));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n  const lastReadId = selectUserStories(global, userId)?.lastReadId;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    user: selectUser(global, userId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n  ApiUsername,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n  selectUserStory,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport EmbeddedStory from '../../common/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n    getIsMessageListReady: Signal<boolean>;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyStory,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  onPinnedIntersectionChange,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasStoryReply = Boolean(message.replyToStoryId);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useEnsureStory(\n    message.replyToStoryUserId ? message.replyToStoryUserId : chatId,\n    message.replyToStoryId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <i className={`icon ${forwardInfo?.hiddenUserName ? 'icon-forward' : 'icon-share-filled'}`} />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeEmojiInteractions, activeReactions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, forwardInfo,\n      transcriptionId, isPinned, replyToStoryUserId, replyToStoryId, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectUserStory(global, webPageStoryData.userId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = replyToStoryId && replyToStoryUserId\n      ? selectUserStory(global, replyToStoryUserId, replyToStoryId)\n      : undefined;\n    const storySender = replyToStoryUserId ? selectUser(global, replyToStoryUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyStory,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiStory,\n  ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Button from '../../ui/Button';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { isLocalMessageId } from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadUserStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByUserIds = storyDataList.reduce((acc, storyData) => {\n      const { userId, id } = storyData!;\n      if (!acc[userId]) {\n        acc[userId] = [];\n      }\n      acc[userId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByUserIds).forEach(([userId, storyIds]) => {\n      loadUserStoriesByIds({ userId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  IS_ELECTRON,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadUserSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const isFullyLoaded = story && 'content' in story;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleUser: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.userId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} />\n        )}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStories,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useUserStoriesPolling from '../../hooks/polling/useUserStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadUserPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadUserStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadUserPinnedStories({ userId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ offsetId });\n  }, []);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadUserStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  useUserStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let hasStoriesTab;\n    let resolvedUserId;\n    let user;\n    let storyIds;\n    let archiveStoryIds;\n    let storyByIds;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      const userFullInfo = selectUserFullInfo(global, chatId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n      hasStoriesTab = user && (user.isSelf || (!user.areStoriesHidden && userFullInfo?.hasPinnedStories));\n      const userStories = hasStoriesTab ? selectUserStories(global, user!.id) : undefined;\n      storyIds = userStories?.pinnedIds;\n      storyByIds = userStories?.byId;\n      archiveStoryIds = userStories?.archiveIds;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n    loadPremiumSetStickers,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron!.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectChat","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","replyToStoryId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","round","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyId","userId","storyUserId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","selectThreadTopMessageId","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyingToForFirstMessage","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectUserStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","management","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadUserStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","join","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","userStories","updateUsersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectUserStories","skippedStoryIds","addStoriesForUser","updateLastViewedStoryForUser","serverTime","byUserId","lastReadId","updateLastReadStoryForUser","removeUserStory","currentIsPinned","updateUserStory","updateUserPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedUserList","allowUserIds","deniedUserList","blockUserIds","visibility","toggleUserStoriesHidden","userIdsToLoad","maxStoryId","hasStories","previousReaction","sentReaction","getStoryKey","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","APP_VERSION_REGEX","then","trim","test","isUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","sendAsMessage","isSingleUser","isSingleStory","isArchive","selectUserFirstUnreadStoryId","selectUserFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByUserIds","isShown","orderedUserIds","_userStories$storySou","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousUserId","previousUserIdIndex","previousStoryId","_userStories$storySou2","userStoryIds","nextStoryIndex","nextUserId","nextUserIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","React","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","size","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","handleLockScreenHotkey","stopPropagation","handleOpenMyStories","useHotkeys","IS_APP","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","Switcher","label","checked","noAnimation","Toggle","isCharIcon","WEB_VERSION_BASE","getPromptInstall","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","Settings","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","inlineButtons","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getUserColorKey","srcUrl","getPictogramDimensions","draggable","renderPictogram","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","openComments","recentRepliers","usersById","chatsById","hasUnread","commentsText","AnimatedCounter","Avatar","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","MediaSpoiler","thumbDataUri","isVisible","formatMediaDuration","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","onSendVote","openPollResults","requestConfetti","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","isText","REACTION_SIZE","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","noLoop","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","path","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","replyToStoryUserId","isChatWithSelf","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasReply","isReplyMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","customTitle","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","isComments","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadUserStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByUserIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","ConfirmDialog","confirmIsDestructive","confirmLabel","confirmHandler","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","spoiler","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","AttachBotInstallModal","info","ChatlistModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadUserSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","hasStoriesTab","resolvedUserId","archiveStoryIds","storyByIds","userFullInfo","hasPinnedStories","archiveIds","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadUserPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadUserStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","useUserStoriesPolling","prevTabType","tabsEl","ProfileState","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Profile","SharedMedia","MemberList","StoryList","Search","StickerSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","filename","encodeURIComponent","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","Notifications","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}