{"version":3,"file":"5769.2713379e582ab16d6654.js","mappings":"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AAAA,KAA+BroG,EAAQoB,GACjE+lG,gCACAC,oCACAkB,cAAenxF,QAAQ+C,GAAcquF,cACrCC,oBAAoBllG,EAAAA,EAAAA,KAA+BtD,EAAQ,kBAC3DwkG,eACAzP,eACA0T,kBAAmBxO,IAAmBpmE,gBACjCgwE,GAAe6E,gBAAkBzO,IAAmBvM,iBACpDmW,GAAe8E,mBAAqB1O,IAAmBzM,gBAC5Dob,mBAAoB5oG,EAAO+wB,SAASyR,MAAMomE,sBACtCzlG,GAAc,CAAE22F,gBAAgB+O,EAAAA,EAAAA,KAAqB7oG,EAAQgB,EAA6B,cAApB6Z,OAC5C,iBAAnBuvE,IAA+B,CAAEA,sBACxC4b,IAAa,CACfE,kBACAC,oBACAp6F,uBACAq6F,iBAEFr5D,KAAM/sC,EAAO4sC,mBAAmBpK,MACjC,GAhMemyB,EAtoCuBm0C,EACzC9nG,UACA+nG,+BACA9hB,gCACA2a,gCACA5vB,QACA8K,YACAinB,aACAD,iBACAkF,aACA7O,YACA8O,kBACAC,cACAjF,iBACAp7E,YACAsgF,gBACAC,yBACApF,wBACAkE,iBACAC,kBACAkB,eACA7rE,QACAknE,kBACAjvD,SACAmvD,gBACAC,eACA7lE,YACA+lE,cACAI,kBACAztF,eACA2tF,qBACAG,4BACAC,mBACAI,aACAH,iBACAI,cACAhM,iBACA1P,iBACAj/C,oBACAs9D,oBACA1kB,cACA0jB,kBACAzB,YACAE,iBACAE,eACAD,mBACAp6F,uBACA04F,gBACA9rB,kBACAurB,iBACAE,uBACA96C,aACAlc,WACA02C,YACAuiB,aACA3F,iBACA8F,uBACAe,sBACAe,iBACAzkB,kBACA7N,cACA2xB,mBACAxgG,YACAy/F,mBACAt8D,sBACA6B,mBACAz/B,2BACAmO,mBACAgtF,gBACA35F,YACA08E,iBACA6D,oBACAqZ,oBACAE,sBACAD,yBACA9N,qBACA4M,qBACAyC,wBACAxE,qBACAiC,gBACAD,gBACAG,oBACAI,0BACAe,4BACAjB,gCACAC,oCACAoB,sBACAhE,gBACAzP,eACA5Q,yBACAykB,sBACA77D,QACAw8D,kCAEA,MAAM,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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/ReadTimeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage, isLocalMessageId,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isDeletedUser,\n  isLocalMessageId,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType, ThreadId } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !threadId || !currentSearch) {\n    return;\n  }\n\n  const { query, results, savedTag } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query && !savedTag) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n    savedTag,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  const hasTagChanged = !isSameReaction(savedTag, currentSearch?.savedTag);\n  if (!currentSearch || query !== currentSearch.query || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n  selectUser,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    form, invoice, users, botId,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = updatePayment(global, {\n    botName: selectUser(global, botId)?.firstName,\n  }, tabId);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: String(month.amount),\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  let tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByCallback, buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { getMessageKey } from '../../../util/messageKey';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views\n      .filter((view): view is ApiStoryView => 'date' in view)\n      .map((view) => view.peerId);\n    global = updatePeerStoryViews(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey, isSameReaction } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n  updateLocalTextSearchTag,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, '', tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalTextSearchTag', (global, actions, payload): ActionReturnType => {\n  const { tag, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { savedTag } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (!isSameReaction(tag, savedTag)) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, tag, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearchTag(global, chatId, threadId, undefined, tabId);\n  global = updateLocalTextSearch(global, chatId, threadId, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog, getMessageSummaryText, getSenderTitle, isChatChannel, isJoinedChannelMessage,\n} from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGetReadDateModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    readDateModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeGetReadDateModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    readDateModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSponsoredWebPage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiBotApp } from './bots';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended, sponsorInfo,\n    additionalInfo, showPeerPhoto, webpage, buttonText, app,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(webpage && { webPage: buildSponsoredWebPage(webpage) }),\n    ...(showPeerPhoto && { isAvatarShown: true }),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n    ...(sponsorInfo && { sponsorInfo }),\n    ...(additionalInfo && { additionalInfo }),\n    ...(buttonText && { buttonText }),\n    ...(app && { botApp: buildApiBotApp(app) }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent' | 'pinned' |\n    'savedPeerId'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n  } satisfies ApiMessage);\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      userId: replyHeader.userId.toString(),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: string;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      const cryptoAmountWithDecimals = action.cryptoAmount!.divide(1e7).toJSNumber() / 100;\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: cryptoAmountWithDecimals.toFixed(2),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      userId: inputInfo.userId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nexport function buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n    ttlSeconds,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n        ttlSeconds,\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nfunction buildSponsoredWebPage(webPage: GramJs.TypeSponsoredWebPage): ApiSponsoredWebPage {\n  let photo: ApiPhoto | undefined;\n  if (webPage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(webPage.photo);\n    photo = buildApiPhoto(webPage.photo);\n  }\n\n  return {\n    ...pick(webPage, [\n      'url',\n      'siteName',\n    ]),\n    photo,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { isChatChannel, isLocalMessageId } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  deleteChatMessages,\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.fetchChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReadDateModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReadTimeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReadTimeModal = useModuleLoader(Bundles.Extra, 'ReadTimeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReadTimeModal ? <ReadTimeModal {...props} /> : undefined;\n};\n\nexport default ReadTimeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"only-reactions\":\"dpkAoSjW\",\"onlyReactions\":\"dpkAoSjW\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments || (message.content.text && !currentAlbum.mainMessage.hasComments)) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectChatLastMessage, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  stickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (!stickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n    return stickers[randomIndex];\n  }, [stickers]);\n\n  useEffect(() => {\n    if (stickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, stickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"image\":\"y7ijMlDf\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelUploadMedia({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIcon\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n}> = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  observeIntersection,\n  onClick,\n}) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(reaction.reaction);\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className={styles.animatedEmoji}\n        containerId={containerId}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className={styles.counter} />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/messageKey';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    openPremiumModal,\n  } = getActions();\n  const lang = useLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      setLocalTextSearchTag({ tag: reaction });\n      searchTextMessagesLocal();\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  tags,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasText = hasMessageText(message);\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.mainMessage.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n      tags: global.savedReactionTags?.byKey,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    requestAppWebView,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n    clickSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n  const isBotApp = Boolean(message?.botApp);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n\n    if (isBotApp) {\n      const { shortName } = message.botApp!;\n      const theme = extractCurrentThemeParams();\n\n      requestAppWebView({\n        botId: message.chatId!,\n        appName: shortName,\n        startApp: message.startParam,\n        theme,\n      });\n    } else if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderPhoto() {\n    if (message?.botApp) {\n      if (!message.botApp.photo) return undefined;\n\n      return (\n        <Avatar\n          size=\"large\"\n          peer={bot}\n          photo={message.botApp.photo}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    if (channel) {\n      return (\n        <Avatar\n          size=\"large\"\n          peer={channel}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    const buttonText = message?.buttonText ?? (\n      isBotApp\n        ? lang('BotWebAppInstantViewOpen')\n        : (message!.isBot\n          ? lang('Conversation.ViewBot')\n          : lang(message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel')\n        ));\n    const title = isBotApp\n      ? message!.botApp!.title\n      : (bot\n        ? renderText(getUserFullName(bot) || '')\n        : (channel ? renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '') : '')\n      );\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(bot || peer || channel),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {renderPhoto()}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isSynced, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions?.results.length);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport ReadTimeModal from '../common/ReadTimeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReadDateModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReadDateModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReadTimeModal isOpen={isReadDateModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, readDateModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReadDateModalOpen: Boolean(readDateModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, getIsSavedDialog, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    fetchChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      fetchChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"e0JMk_Kh\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { userIds, chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !(userIds && chatId));\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport OneTimeMediaModal from '../modals/oneTimeMedia/OneTimeMediaModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport InviteViaLinkModal from './InviteViaLinkModal.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n  oneTimeMediaModal?: TabState['oneTimeMediaModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n  oneTimeMediaModal,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n      loadSavedReactionTags();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} />\n      <OneTimeMediaModal info={oneTimeMediaModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal userIds={inviteViaLinkModal?.restrictedUserIds} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","savedTag","MESSAGE_SEARCH_SLICE","hasTagChanged","isSameReaction","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","updatePayment","botName","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","stopActiveReaction","loadSavedReactionTags","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","key","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","updateStoryViews","recentViewerIds","view","updatePeerStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearchTag","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","readDateModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","filename","fileName","size","audio","shouldSendAsSpoiler","ttlSeconds","quick","height","sizes","dataUri","isSpoiler","duration","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","replyToPeerId","quoteText","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","fetchChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","ReadTimeModal","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","mainMessage","albumId","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","selectChatLastMessage","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","untilDate","prizeDescription","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countries","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIcon","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","Separator","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","isText","REACTION_SIZE","ReactionButton","recentReactors","chosenClassName","own","isReactionChosen","ReactionAnimatedEmoji","animatedEmoji","AvatarList","counter","Reactions","isOutside","metaChildren","noRecentReactors","setLocalTextSearchTag","searchTextMessagesLocal","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","handleRemoveReaction","SavedTagButton","withContextMenu","onRemove","Sticker","observeIntersectionForPlaying","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","onEnded","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyUserId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasText","hasMessageText","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","EmbeddedMessage","senderChat","forwardSender","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","backgroundEmojiId","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","SponsoredMessage","viewSponsoredMessage","openChatByInvite","requestAppWebView","clickSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","isBotApp","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","renderPhoto","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","backgroundColor","MessageSelectToolbar","ChatReportPanel","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReadDateModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","OneTimeMediaModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","getMessageMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","InviteViaLinkModal","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadPeerColors","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","stickerSetShortName","UnreadCount","restrictedUserIds","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}